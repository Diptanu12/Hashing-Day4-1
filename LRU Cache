LRU Cache
Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.

int get(int key) Return the value of the key if the key exists, otherwise return -1.

void set(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.

The functions get and set must each run in O(1) average time complexity.

Input Format:
First line of input contains the cap size of LRU.

Second line of input contains the number of queries Q.

Third line of input contains the queries containing GET followed by single integer and SET followed by 2 integers.

Output Format
Print the output of the GET queries.

Example 1
Input:

2
2
SET 1 2 
GET 1
Output::

2
Explanation

Cache Size = 2

SET 1 2 GET 1

SET 1 2 : 1 -> 2

GET 1 : Print the value corresponding

to Key 1, ie 2.

Example 2
Input:

2
8
SET 1 2 
SET 2 3 
SET 1 5
SET 4 5 
SET 6 7 
GET 4 
SET 1 2 
GET 3
Output::

5 -1
Explanation

Cache Size = 2

SET 1 2 : 1 -> 2

SET 2 3 : 1 -> 2, 2 -> 3 (the most recently

used one is kept at the rightmost position)

SET 1 5 : 2 -> 3, 1 -> 5

SET 4 5 : 1 -> 5, 4 -> 5 (Cache size is 2, hence

we delete the least recently used key-value pair)

SET 6 7 : 4 -> 5, 6 -> 7

GET 4 : Prints 5 (The cache now looks like 6 -> 7, 4->5)

SET 1 2 : 4 -> 5, 1 -> 2 (Cache size is 2, hence we delete the least recently used key-value pair)

GET 3 : No key value pair having key = 3. Hence, -1 is printed.

Constraints
1 <= cap <= 1000

1 <= Q <= 10000

1 <= x, y <= 1000

Topics
Linked lists
Design
Queues



import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int cap = sc.nextInt(), q = sc.nextInt();
        String[] queries = new String[q];
        for (int i = 0; i < q; i++) {
            String s = sc.next();
            if (s.equals("GET"))
                s += " " + sc.nextInt();
            else
                s += " " + sc.nextInt() + " " + sc.nextInt();
            queries[i] = s;
        }
        sc.close();
        LRUCache lruCache = new LRUCache(cap);
        for (String s : queries) {
            String[] arr = s.split(" ");
            if (arr.length == 3)
                lruCache.set(Integer.parseInt(arr[1]), Integer.parseInt(arr[2]));
            else
                System.out.println(lruCache.get(Integer.parseInt(arr[1])));
        }
    }
}

class Node {
    int key;
    int value;

    Node next;
    Node prev;

    Node() {
        this.key = 0;
        this.value = 0;
        this.next = null;
        this.prev = null;
    }

    Node(int key, int value) {
        this.key = key;
        this.value = value;
        this.next = null;
        this.prev = null;
    }
}

class LRUCache {

    Node dh;
    Node dt;

    HashMap<Integer, Node> map;

    int maxCap;

    public LRUCache(int capacity) {
        dh = new Node();
        dt = new Node();

        dh.next = dt;
        dt.prev = dh;

        maxCap = capacity;

        map = new HashMap<>();
    }

    public void addLast(Node node) {
        Node p = dt.prev;
        p.next = node;
        node.prev = p;

        node.next = dt;
        dt.prev = node;
    }

    public void removeNode(Node node) {
        Node p = node.prev;
        Node n = node.next;

        p.next = n;
        n.prev = p;

        node.prev = null;
        node.next = null;
    }

    public void moveToEnd(Node node) {
        removeNode(node);
        addLast(node);
    }

    public int get(int key) {
        if (map.containsKey(key) == false) {
            return -1;
        } else {
            Node node = map.get(key);

            int value = node.value;
            moveToEnd(node);

            return value;
        }
    }

    public void set(int key, int value) {
        if (map.containsKey(key) == false) {
            Node node = new Node(key, value);

            if (map.size() == maxCap) {
                Node LRU_Node = dh.next;
                removeNode(LRU_Node);
                map.remove(LRU_Node.key);
            }

            addLast(node);
            map.put(key, node);
        } else {
            Node node = map.get(key);
            node.value = value;

            moveToEnd(node);
        }
    }
}
